# Generated from antlr/Kotlisp.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,235,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,3,28,172,8,28,1,28,4,28,175,8,28,11,28,12,28,
        176,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,188,8,29,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,4,30,197,8,30,11,30,12,30,198,1,
        30,1,30,1,31,4,31,204,8,31,11,31,12,31,205,1,32,4,32,209,8,32,11,
        32,12,32,210,1,32,1,32,1,33,1,33,1,33,1,33,5,33,219,8,33,10,33,12,
        33,222,9,33,1,33,1,33,1,34,1,34,1,35,1,35,3,35,230,8,35,1,36,1,36,
        1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,0,71,0,73,0,75,0,1,0,2,5,0,33,33,44,44,46,46,60,60,62,
        63,4,0,9,10,13,13,32,32,44,44,244,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,1,77,1,0,0,0,3,81,1,0,0,0,5,86,1,0,0,0,7,91,1,0,
        0,0,9,99,1,0,0,0,11,102,1,0,0,0,13,104,1,0,0,0,15,106,1,0,0,0,17,
        112,1,0,0,0,19,122,1,0,0,0,21,126,1,0,0,0,23,130,1,0,0,0,25,135,
        1,0,0,0,27,137,1,0,0,0,29,139,1,0,0,0,31,141,1,0,0,0,33,143,1,0,
        0,0,35,145,1,0,0,0,37,147,1,0,0,0,39,149,1,0,0,0,41,151,1,0,0,0,
        43,153,1,0,0,0,45,156,1,0,0,0,47,158,1,0,0,0,49,161,1,0,0,0,51,163,
        1,0,0,0,53,166,1,0,0,0,55,168,1,0,0,0,57,171,1,0,0,0,59,187,1,0,
        0,0,61,189,1,0,0,0,63,203,1,0,0,0,65,208,1,0,0,0,67,214,1,0,0,0,
        69,225,1,0,0,0,71,229,1,0,0,0,73,231,1,0,0,0,75,233,1,0,0,0,77,78,
        5,102,0,0,78,79,5,117,0,0,79,80,5,110,0,0,80,2,1,0,0,0,81,82,5,108,
        0,0,82,83,5,105,0,0,83,84,5,115,0,0,84,85,5,116,0,0,85,4,1,0,0,0,
        86,87,5,115,0,0,87,88,5,101,0,0,88,89,5,116,0,0,89,90,5,113,0,0,
        90,6,1,0,0,0,91,92,5,100,0,0,92,93,5,111,0,0,93,94,5,116,0,0,94,
        95,5,105,0,0,95,96,5,109,0,0,96,97,5,101,0,0,97,98,5,115,0,0,98,
        8,1,0,0,0,99,100,5,105,0,0,100,101,5,102,0,0,101,10,1,0,0,0,102,
        103,5,91,0,0,103,12,1,0,0,0,104,105,5,93,0,0,105,14,1,0,0,0,106,
        107,5,112,0,0,107,108,5,114,0,0,108,109,5,105,0,0,109,110,5,110,
        0,0,110,111,5,116,0,0,111,16,1,0,0,0,112,113,5,114,0,0,113,114,5,
        101,0,0,114,115,5,97,0,0,115,116,5,100,0,0,116,117,5,45,0,0,117,
        118,5,108,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,121,5,101,
        0,0,121,18,1,0,0,0,122,123,5,105,0,0,123,124,5,110,0,0,124,125,5,
        116,0,0,125,20,1,0,0,0,126,127,5,115,0,0,127,128,5,116,0,0,128,129,
        5,114,0,0,129,22,1,0,0,0,130,131,5,98,0,0,131,132,5,111,0,0,132,
        133,5,111,0,0,133,134,5,108,0,0,134,24,1,0,0,0,135,136,5,43,0,0,
        136,26,1,0,0,0,137,138,5,45,0,0,138,28,1,0,0,0,139,140,5,42,0,0,
        140,30,1,0,0,0,141,142,5,47,0,0,142,32,1,0,0,0,143,144,5,94,0,0,
        144,34,1,0,0,0,145,146,5,38,0,0,146,36,1,0,0,0,147,148,5,37,0,0,
        148,38,1,0,0,0,149,150,5,124,0,0,150,40,1,0,0,0,151,152,5,61,0,0,
        152,42,1,0,0,0,153,154,5,33,0,0,154,155,5,61,0,0,155,44,1,0,0,0,
        156,157,5,62,0,0,157,46,1,0,0,0,158,159,5,62,0,0,159,160,5,61,0,
        0,160,48,1,0,0,0,161,162,5,60,0,0,162,50,1,0,0,0,163,164,5,60,0,
        0,164,165,5,61,0,0,165,52,1,0,0,0,166,167,5,40,0,0,167,54,1,0,0,
        0,168,169,5,41,0,0,169,56,1,0,0,0,170,172,5,45,0,0,171,170,1,0,0,
        0,171,172,1,0,0,0,172,174,1,0,0,0,173,175,3,69,34,0,174,173,1,0,
        0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,58,1,0,0,
        0,178,179,5,116,0,0,179,180,5,114,0,0,180,181,5,117,0,0,181,188,
        5,101,0,0,182,183,5,102,0,0,183,184,5,97,0,0,184,185,5,108,0,0,185,
        186,5,115,0,0,186,188,5,101,0,0,187,178,1,0,0,0,187,182,1,0,0,0,
        188,60,1,0,0,0,189,196,5,34,0,0,190,197,3,71,35,0,191,197,3,69,34,
        0,192,197,3,65,32,0,193,197,7,0,0,0,194,195,5,92,0,0,195,197,5,110,
        0,0,196,190,1,0,0,0,196,191,1,0,0,0,196,192,1,0,0,0,196,193,1,0,
        0,0,196,194,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,
        0,0,199,200,1,0,0,0,200,201,5,34,0,0,201,62,1,0,0,0,202,204,3,71,
        35,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,
        0,0,206,64,1,0,0,0,207,209,7,1,0,0,208,207,1,0,0,0,209,210,1,0,0,
        0,210,208,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,6,32,0,
        0,213,66,1,0,0,0,214,220,5,35,0,0,215,219,3,71,35,0,216,219,3,69,
        34,0,217,219,3,65,32,0,218,215,1,0,0,0,218,216,1,0,0,0,218,217,1,
        0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,223,1,
        0,0,0,222,220,1,0,0,0,223,224,6,33,0,0,224,68,1,0,0,0,225,226,2,
        48,57,0,226,70,1,0,0,0,227,230,3,73,36,0,228,230,3,75,37,0,229,227,
        1,0,0,0,229,228,1,0,0,0,230,72,1,0,0,0,231,232,2,97,122,0,232,74,
        1,0,0,0,233,234,2,65,90,0,234,76,1,0,0,0,11,0,171,176,187,196,198,
        205,210,218,220,229,1,6,0,0
    ]

class KotlispLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    PLUS = 13
    MINUS = 14
    MULT = 15
    DIV = 16
    XOR = 17
    AND = 18
    MOD = 19
    OR = 20
    EQUALS = 21
    NOT_EQUALS = 22
    GREATER = 23
    GREATER_OR_EQUALS = 24
    LESS = 25
    LESS_OR_EQUALS = 26
    OP = 27
    CP = 28
    NUMBER = 29
    BOOLEAN = 30
    STRING = 31
    NAME = 32
    WHITESPACE = 33
    COMMENT = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'fun'", "'list'", "'setq'", "'dotimes'", "'if'", "'['", "']'", 
            "'print'", "'read-line'", "'int'", "'str'", "'bool'", "'+'", 
            "'-'", "'*'", "'/'", "'^'", "'&'", "'%'", "'|'", "'='", "'!='", 
            "'>'", "'>='", "'<'", "'<='", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "PLUS", "MINUS", "MULT", "DIV", "XOR", "AND", "MOD", "OR", "EQUALS", 
            "NOT_EQUALS", "GREATER", "GREATER_OR_EQUALS", "LESS", "LESS_OR_EQUALS", 
            "OP", "CP", "NUMBER", "BOOLEAN", "STRING", "NAME", "WHITESPACE", 
            "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "PLUS", "MINUS", 
                  "MULT", "DIV", "XOR", "AND", "MOD", "OR", "EQUALS", "NOT_EQUALS", 
                  "GREATER", "GREATER_OR_EQUALS", "LESS", "LESS_OR_EQUALS", 
                  "OP", "CP", "NUMBER", "BOOLEAN", "STRING", "NAME", "WHITESPACE", 
                  "COMMENT", "DIGIT", "LETTER", "LOWER", "UPPER" ]

    grammarFileName = "Kotlisp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


